Function New-ServicePrincipalObject
{
        <#
		.SYNOPSIS
            Cmdlet for creating a new azure active directory service principal.

		.DESCRIPTION
            This function will create a new azure active directory service principal.
            All messages are logged by defaul to the following folder [[Environment]::GetFolderPath("MyDocuments") "\PowerShell Script Logs"].
            For more information please visit: https://psframework.org/
            PSFramework Logging: https://psframework.org/documentation/quickstart/psframework/logging.html
            PSFramework Configuration: https://psframework.org/documentation/quickstart/psframework/configuration.html
            PSGallery - PSFramework module - https://www.powershellgallery.com/packages/PSFramework/1.0.19

        .PARAMETER EnableException
            This parameter disables user-friendly warnings and enables the throwing of exceptions.
            This is less user friendly, but allows catching exceptions in calling scripts.

        .PARAMETER Reconnect
            This parameter switch is used when forcing a new connection to an Azure tenant subscription.

        .PARAMETER BatchJob
            This parameter switch is used when we are passing in a object file containing user names to be batch processed.

        .PARAMETER NameFile
            This parameter is the name of the file that contains the list of service principals being passed in to be created.

        .PARAMETER ApplicationID
            This parameter is the unique application id for a service principal in a tenant. Once created this property cannot be changed.

        .PARAMETER ServicePrincipalName
            This parameter is the friendly name of the service principal you wish to create. You need to pass in a service principal name for single object creation.

        .PARAMETER Certificate
            This parameter is the value of the "asymmetric" credential type. It represents the base 64 encoded certificate.

        .PARAMETER TenantId
            This parameter is the Azure tenant you are connecting to.

        .PARAMETER SubscriptionId
            This parameter is that Azure subscription you are connecting to.

        .EXAMPLE
            PS c:\> New-ServicePrincipalObject

            This example connects to an Azure tenant with an Azure account. You must provide a Microsoft account or organizational ID credentials. If multi-factor authentication is enabled for your credentials, you must log in using the interactive option or use service principal authentication.
            Once connected this will create an Active Directory service principal using default values for parameters not provided. Since an application id was not provided, an application id will be created for the service principal.

        .EXAMPLE
            PS c:\> New-ServicePrincipalObject -Tenant 'xxxx-xxxx-xxxx-xxxx' -SubscriptionId 'yyyy-yyyy-yyyy-yyyy'

            This example uses an interactive login to connect to a specific tenant and subscription.
            Once connected this will create an Active Directory service principal using default values for parameters not provided. Since an application id was not provided, an application id will be created for the service principal.

        .EXAMPLE
            PS c:\> New-ServicePrincipalObject -ApplicationID 34a28ad2-dec4-4a41-bc3b-d22ddf90000e

            This Creates a new Active Directory service principal for the application with application id '34a28ad2-dec4-4a41-bc3b-d22ddf90000e'.

        .EXAMPLE
            PS c:\> New-ServicePrincipalObject -ServicePrincipalName NameOfSPNToBeCreated

            This creates a new application with name "NameOfSPNToBeCreated" and password (an autogenerated GUID) and creates the service principal based on the application just created. The start date and end date are added to password credential.

        .EXAMPLE
            PS c:\> New-ServicePrincipalObject -ServicePrincipalName NameOfSPNToBeCreated -Certificate <public certificate as base64-encoded string>

            This creates a new application with name "NameOfSPNToBeCreated" and certifcate and creates the service principal based on the application just created. The end date is added to key credential.

        .EXAMPLE
            PS c:\> New-ServicePrincipalObject -NameFile -BatchJob

            This will consume a file of service principals to batch created. You must use the -BatchJob parameter to indicate this is a batch create.

        .EXAMPLE
            PS c:\> New-ServicePrincipalObject -Reconnect -Tenant $TenantId -SubscriptionId $SubscriptionId

            This will take a Azure tenant id and Azure subscription and force a reconnect to that specific tenant. Useful when switching between Azure tenants.

        .EXAMPLE
            PS c:\> New-ServicePrincipalObject -EnableException

            Creates a new service principal in AAD, after prompting for user preferences.
            If this execution fails for whatever reason (connection, bad input, ...) it will throw a terminating exception, rather than writing the default warnings.

        .NOTES
            When passing in the application ID it is the Azure ApplicationID from your registered application.

            WARNING: If you do not connect to an Azure tenant when you run Import-Module Az.Resources you will be logged in interactively to your default Azure subscription.
            After signing in, you'll see information indicating which of your Azure subscriptions is active.
            If you have multiple Azure subscriptions in your account and want to select a different one,
            get your available subscriptions with Get-AzSubscription and use the Set-AzContext cmdlet with your subscription ID.

            INFORMATION: The default parameter set uses default values for parameters if the user does not provide one for them.
            For more information on the default values used, please see the description for the given parameters below.
            This cmdlet has the ability to assign a role to the service principal with the Role and Scope parameters;
            if neither of these parameters are provided, no role will be assigned to the service principal.

            The default values for the Role and Scope parameters are "Contributor" and the current subscription. These roles are applid at the end
            of the service principal creation.

            Microsoft TechNet Documentation: https://docs.microsoft.com/en-us/powershell/module/az.resources/new-azadserviceprincipal?view=azps-3.8.0
    #>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding()]
    param(
        [switch]
        $EnableException,

        [switch]
        $Reconnect,

        [switch]
        $BatchJob,

        [string]
        $NameFile,

        [string]
        $ApplicationID,

        [string]
        $ServicePrincipalName,

        [string]
        $Certificate,

        [string]
        $TenantId,

        [string]
        $SubscriptionId
    )

    Process
    {
        Clear-Host
        $spnCounter = 0
        Write-PSFMessage -Level Host -Message "Starting Script Run"

        try
        {
            Connect-ToTenantInAzure -Reconnct $Reconnect -Tenant $TenantId -SubscriptionId $SubscriptionId
        }
        catch
        {
            Stop-PSFFunction -Message $_.Exception.InnerException.Message -EnableException $EnableException -Cmdlet $PSCmdlet -ErrorRecord $_
            return
        }

        # Try to obtain the list of names so we can batch create the SPNS
        if(($NameFile) -and ($BatchJob))
        {
            Write-PSFMessage -Level Host -Message "Testing access to {0}" -StringValues $NameFile

            if(-NOT (Test-Path -Path $NameFile))
            {
                Stop-PSFFunction -Message "Error: File problem. Exiting" -EnableException $EnableException -Cmdlet $PSCmdlet -ErrorRecord $_
                return
            }
            else
            {
                Write-PSFMessage -Level Host -Message "{0} accessable. Reading in content" -StringValues $NameFile
                $listofSPNStoCreate = Get-Content $NameFile

                # Validate that we have data and if we dont we exit out
                if(0 -eq $listofSPNStoCreate.Length)
                {
                    Stop-PSFFunction -Message "Error with imported content. Exiting" -EnableException $EnableException -Cmdlet $PSCmdlet -ErrorRecord $_
                    return
                }
            }
        }
        else
        {
            #Stop-PSFFunction -Message "You must pass in a file name and use the -BatchJob parameter. Exiting" -EnableException $EnableException -Cmdlet $PSCmdlet -ErrorRecord $_
            #return
        }

        Write-PSFHostColor @"
What type of Service Principal do you want to generate?

[X] - Exit
[D] - Default Service Principal - Auto-generated name and ApplicationID
[P] - Service Principal using GUID generated password (Single object and Batch Objects) - Service Principal name needed
[A] - Service Principal with ApplicationID already bound to an registerd Azure application
[C] - Service Principal using plan certificate base key credential - Service Principal name needed
[R] - Retrieve a Service Principal and Application object and display all information - Service Principal name needed
Default select option (X):
"@
        $optonSelected = Get-PSFUserChoice -Options 'E&xit', 'Default SPN', 'Passowrd SPN', 'AppID SPN', 'Certificate SPN', 'Retrieve SPN and App' -Caption 'Please select an option'

        switch($optonSelected)
        {
            0
            {
                Write-PSFMessage -Level Warning -Message "User selected to quit. Exiting"
                return
            }

            1
            {
                try
                {
                    Write-PSFMessage -Level Host -Message "Creating a simple SPN with auto generated values"
                    $newSPN = New-AzADServicePrincipal -ErrorAction Stop
                    Write-PSFMessage -Level Host -Message "SPN {0} created with application id {1}" -StringValues $newSPN.DisplayName, $newSPN.ApplicationId

                    # Retreive secret key for user
                    $getSecretKey = Read-Host "would you like to retreive the secret key for this SPN?"

                    if($getSecretKey)
                    {
                        $Marshal = [System.Runtime.InteropServices.Marshal]
                        $BSTR = $Marshal::SecureStringToBSTR($newSPN.Secret)
                        $secretKey = $Marshal::PtrToStringAuto($BSTR)
                        Write-PSFMessage -Level Host -Message "WARNING. This will not be written to logfile. Please write this key down and secure it: Secret Key: {0}" -StringValues $secretKey
                    }

                    $spnCounter ++
                }
                catch
                {
                    Stop-PSFFunction -Message "ERROR: Creating a simple SPN failed" -EnableException $EnableException -Cmdlet $PSCmdlet -ErrorRecord $_
                    return
                }
            }

            2
            {
                try
                {
                    # Check to make sure we have the list of objects to process
                    if($listofSPNStoCreate)
                    {
                        Write-PSFMessage -Level Host -Message "Object list DETECTED! Staring batch creation of SPN's"
                        $roleListToProcess = New-Object -TypeName "System.Collections.ArrayList"
                        foreach($spn in $listofSPNStoCreate)
                        {
                            $password = [guid]::NewGuid().Guid
                            $securityPassword = New-Object Microsoft.Azure.Commands.ActiveDirectory.PSADPasswordCredential -Property @{ StartDate = Get-Date; EndDate = Get-Date -Year 2024; Password = $password}
                            $newSPN = New-AzADServicePrincipal -DisplayName $spn -PasswordCredential $securityPassword -ErrorAction SilentlyContinue -ErrorVariable ProcessError

                            if($newSPN)
                            {
                                Write-PSFMessage -Level Host -Message "Creating new SPN - Name: {0} with Password: {1}" -StringValues $spn, $password
                                $roleListToProcess += $newSPN
                                $spnCounter ++
                            }
                            elseif($ProcessError)
                            {
                                Write-PSFMessage -Level Warning "$($ProcessError[0].Exception.Message) for SPN {0}" -StringValues $spn
                            }
                        }

                        if($roleListToProcess.Count -gt 0)
                        {
                            Add-RoleToSPN -spnToProcess $roleListToProcess
                        }
                    }
                    else
                    {
                        if(-NOT $ServicePrincipalName)
                        {
                            Write-PSFMessage -Level Warning -Message "ERROR: No Service Principal name specified. Exiting"
                            return
                        }
                        else
                        {
                            Write-PSFMessage -Level Host -Message "Creating new SPN - Name: {0}" -Format $ServicePrincipalName
                            $password = [guid]::NewGuid().Guid
                            $securityPassword = New-Object Microsoft.Azure.Commands.ActiveDirectory.PSADPasswordCredential -Property @{ StartDate = Get-Date; EndDate = Get-Date -Year 2024; Password = $password}
                            $newSPN = New-AzADServicePrincipal -DisplayName $ServicePrincipalName -PasswordCredential $securityPassword -ErrorAction Stop
                            Add-RoleToSPN -spnToProcess $newSPN
                            $spnCounter ++
                        }
                    }
                }
                catch
                {
                    Stop-PSFFunction -Message "ERROR: Generating PSADPasswordCredential Object with GUID. Exiting" -EnableException $EnableException -Cmdlet $PSCmdlet -ErrorRecord $_
                    return
                }
            }

            3
            {
                try
                {
                    if(-NOT $ApplicationID)
                    {
                        Stop-PSFFunction -Message "ERROR: No ApplicationID specified. Exiting" -EnableException $EnableException -Cmdlet $PSCmdlet
                        return
                    }
                    else
                    {
                        Write-PSFMessage -Level Host -Message "Creating new SPN with ApplicationID: {0}" -Format $ApplicationID
                        $newSPN = New-AzADServicePrincipal -ApplicationId $ApplicationID -ErrorAction Stop
                        Add-RoleToSPN -spnToProcess $newSPN
                        $spnCounter ++
                    }
                }
                catch
                {
                    Stop-PSFFunction -Message "ERROR: No ApplicationID specified. Exiting" -EnableException $EnableException -Cmdlet $PSCmdlet -ErrorRecord $_
                    return
                }
            }

            4
            {
                try
                {
                    if((-NOT $Certificate) -or (-NOT $ServicePrincipalName))
                    {
                        Stop-PSFFunction -Message "ERROR: No certificate or Service Principal name specified. Exiting" -EnableException $EnableException -Cmdlet $PSCmdlet
                        return
                    }
                    else
                    {
                        Write-PSFMessage -Level Host -Message "Creating new SPN DisplayName and certificate key - Name: {0}" -StringValues $newSPN.DisplayName
                        $newSPN = New-AzADServicePrincipal -DisplayName $ServicePrincipalName -CertValue $Certificate -EndDate "2024-12-31" -ErrorAction Stop
                        Add-RoleToSPN -spnToProcess $newSPN
                        $spnCounter ++
                    }
                }
                catch
                {
                    Stop-PSFFunction -Message "ERROR: No certificate as base64-encoded string specified. Exiting" -EnableException $EnableException -Cmdlet $PSCmdlet -ErrorRecord $_
                    return
                }
            }

            5
            {
                try
                {
                    Get-AppAndSPN -DisplayName $ServicePrincipalName
                    $gotObject = $true
                }
                catch
                {
                    Stop-PSFFunction -Message "ERROR:Exiting" -EnableException $EnableException -Cmdlet $PSCmdlet -ErrorRecord $_
                    return
                }
            }

            Default
            {
                Write-PSFMessage -Level Warning -Message "No choice selected. Exiting"
                return
            }
        }
    }

    end
    {
        if(-NOT $gotObject)
        {
            if(1 -le $spnCounter)
            {
                Write-PSFMessage -Level Host -Message "{0} SPN object created sucessfully!" -StringValues $spnCounter
            }
            else
            {
                Write-PSFMessage -Level Host -Message "{0} SPN objects created sucessfully!" -StringValues $spnCounter
            }
        }

        Write-PSFMessage -Level Host -Message "Script run complete!"
        Write-PSFMessage -Level Host -Message 'Log saved to: {0}. Run Get-LogFolder to retrieve the output or debug logs.' -StringValues $script:loggingFolder #-Once 'LoggingDestination'
    }
}